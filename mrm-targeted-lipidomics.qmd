---
title: "mzQC-Lipidomics-UseCase"
format: html
editor: visual
---

## Reading mzML files

```{r}
library(mzR)
library(tidyverse)
library(janitor)
```

```{r}

fileDir <- file.path("MTBLS1375")
ftpUrl <- "https://ftp.ebi.ac.uk/pub/databases/metabolights/studies/public/MTBLS1375/FILES/"
file1 <- paste0(ftpUrl, "1_LTR_1_A-1.mzML")
download.file(file1, destfile = file.path(fileDir, "1_LTR_1_A-1.mzML"), method = "wget")
file2 <- "https://gitlab.com/sneumannoffice/msdata/-/raw/devel/inst/proteomics/MRM-standmix-5.mzML.gz?ref_type=heads"
download.file(file2, destfile = file.path(fileDir, "MRM-standmix-5.mzML.gz"), method = "wget")

mzML.files <- c("MTBLS1375/1_LTR_1_A-1.mzML", "MTBLS1375/MRM-standmix-5.mzML.gz")

# fileGlob <- "*.mzML"
# 
# mzML.files <- list.files(fileDir, pattern=fileGlob, full.names = T, include.dirs = T)
# mzML.files
```

Read transitions and peak areas exported from Skyline.

```{r}
transitions <- read_csv("MTBLS1375/human_plasma_transitions.csv")
skylineResults <- read_csv("MTBLS1375/human_plasma_export.csv")
```

What we find in the mzMLs:

```{r}
# templateColNames <- c("index","method","tracetype","Q1",       "Q3","start","end","trace","file")
# trace_frame <- as_tibble(data.frame(matrix(ncol = length(templateColNames), nrow = 0)))
# colnames(trace_frame) <- templateColNames


read_chrom <- function(fh, chrom_index) {
  chromHeader <- chromatogramHeader(fh, chrom_index)
  headerList <- str_split(chromHeader$chromatogramId |> str_replace_all("SRM", "method=SRM") |> str_replace_all("SIC","tracetype=SIC"), " ") |> unlist() |> str_split( "=")
  fullChromHeader <- do.call(cbind, headerList) |> as_tibble() |> row_to_names(row_number = 1) |> mutate(index=chrom_index, Q1=as.numeric(Q1), Q3=as.numeric(Q3), start=as.numeric(start), end=as.numeric(end)) |> cbind(chromHeader) |> select(-chromatogramId)
  chrom <- chromatogram(fh, 3)
  colnames(chrom) <- c("time", "value")
  chrom <- chrom |> mutate(index=chrom_index)
  nested_chrom <- chrom |> group_by(index) |> nest()
  
  fullChromHeader |> left_join(nested_chrom, by=c("index")) |> relocate(index) |> mutate(file=fileName(fh)) |> rename(trace=data)
}

merge_all_chroms <- function(fileName) {
  cat("Processing",fileName)
  fh <- mzR::openMSfile(fileName)
  nchroms <- nChrom(fh)
  chroms <- 3:nchroms |> map(\(x) read_chrom(fh, x))
  close(fh)
  table <- bind_rows(chroms)
  cat("...done\n")
  return(table)
}

# chrom_2_fh <- mzR::openMSfile("MTBLS1375/1_LTR_1_A-1.mzML")
# nChrom(chrom_2_fh)
# chrom_2_header <- chromatogramHeader(chrom_2_fh, 487)
```

```{r}
read_chroms_at_index <- function(mzML.files, startIndex) {
  all_chroms <- mzML.files |> map(\(x) {
    cat("Reading file:", x, "\n")
    fh <- mzR::openMSfile(x)
    # reading with index 1 throws an index out of bounds error
    # reading with index 2 reads the chromatogramHeader for the TIC chromatogram, which is the first chromatogram in the mzML files
    chromIndex <- startIndex
    tryCatch(
      {
        chromatogram(fh, chromIndex)
        chromHeader <- chromatogramHeader(fh, chromIndex)
        cat(chromHeader$chromatogramId, "\n")
      },
      error = function(cond) {
        cat("Error encountered for chromatogram indices ", chromIndex, "\n")
        chromHeader <- chromatogramHeader(fh, chromIndex)
        cat("Header: ", chromHeader$chromatogramId, "\n")
        chromatogram <- chromagoram(fh, chromIndex)
        cat("Chrom: ", chromatogram, "\n")
        NA
      },
      warning = function(cond) {
        cat("Warning encountered for chromatogram indices ", chromIndex, "\n")
        chromHeader <- chromatogramHeader(fh, chromIndex)
        cat("Header: ", chromHeader$chromatogramId, "\n")
        chromatogram <- chromagoram(fh, chromIndex)
        cat("Chrom: ", chromatogram, "\n")
        NA
      }
    )
    
  }) 
}


# this fails
read_chroms_at_index(mzML.files[1:1], 1)

# this works (TIC)
read_chroms_at_index(mzML.files[1:1], 2)

# this reads the first non-TIC chromatogram, which should have index 2
read_chroms_at_index(mzML.files[1:1], 3)

#all_chroms <- mzML.files[1:10] |> map(\(x) merge_all_chroms(x)) |> bind_rows()
#write_csv(all_chroms, "all-chromatogram-traces.csv")
```

```{r}
# let's hot patch the method to use '|' instead of '||' and disable the index correction to zero-based indexing
setMethod("chromatogramHeader", "mzRpwiz",
          function(object, chrom) {
              if (missing(chrom)) {
                  res <- object@backend$getAllChromatogramHeaderInfo()
              } else {
                  stopifnot(is.numeric(chrom))
                  n <- nChrom(object)
                  cat("n=",n,"min(chrom)=",min(chrom)," max(chrom)=",max(chrom), "\n")
                  cat("In bounds: ", (min(chrom) < 1 | max(chrom) > n), "\n")
                  if (min(chrom) < 1 | max(chrom) > n)
                      stop("Index out of bound [", 1, ":", n, "]")
                  # Not adjusting the index by -1L makes it work???
                  # chrom <- chrom -1L
                  cat("Not Corrected index (0-based): ", chrom, "\n")
                  res <- object@backend$getChromatogramHeaderInfo(chrom)
              }
              res$chromatogramId <- as.character(res$chromatogramId)
              res
          })
```

```{r}
# try again after hot patching
# this works now
read_chroms_at_index(mzML.files[1:1], 1:3)

# this works (TIC)
read_chroms_at_index(mzML.files[1:1], 1)

# this reads the first two non-TIC chromatogram, which should have index 2 and 3
read_chroms_at_index(mzML.files[1:1], 2:3)

# this fails with index out of bounds
read_chroms_at_index(mzML.files[1:1], 0)
```
